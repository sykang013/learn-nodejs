// http모듈을 쓰고 있는 express를 우리가 쓰는 거임(express 뜯어보면 http를 쓰고있음)
const express = require("express");
const path = require("path");

/* -------------------------------------------------------------------------- */
/*                                1) app을 먼저 만듬                               */
/* -------------------------------------------------------------------------- */
const app = express();

/* -------------------------------------------------------------------------- */
/*                           2) app.set 으로 app관련 설정                           */
/* -------------------------------------------------------------------------- */
/* --------------------------------- app.set -------------------------------- */
// 서버에다 속성같은 것을 심는다고 생각하면 됨
//// 포트라는 속성에 3000을 넣는다 // 그리고 이제부터 process.env를 적극 사용할것임
app.set("port", process.env.PORT || 3000);

/* -------------------------------------------------------------------------- */
/*                               3) 공통 미들웨어 넣어줌                               */
/* -------------------------------------------------------------------------- */
/* ---------------------------- 미들웨어 ---------------------------- */
// app.use 는 모든 코드에서 실행됨
// 미들웨어는 아래 코드에서 (req... 부터 시작해서 ...next();} 까지이다.
// 미들웨어는 next()를 꼭 사용해줘야 다음 단계(맞는 주소)를 찾아간다.
// 미들웨어를 아래처럼 여러개 사용할 수도 있다.
app.use(
  (req, res, next) => {
    console.log("1 요청에 실행하고 싶다.");
    next();
  },
  (req, res, next) => {
    console.log("2 요청에 실행하고 싶다.");
    next();
  },
  (req, res, next) => {
    console.log("3 요청에 실행하고 싶다.");
    next();
  },
  (req, res, next) => {
    throw new Error("에러 발생");
  }
);

/* -------------------------------------------------------------------------- */
/*              4) 라우터들 넣어줌(와일드 카드같이 범위가 넓은 애들은 뒷차례로)                               */
/* -------------------------------------------------------------------------- */
/* ------------------------------ express 서버 실행 ----------------------------- */
// app에다가 메서드를 붙여주는 방식으로 구별 가능(더이상 if문을 사용하지 않아도 됨)
app.get("/", (req, res) => {
  // sendFiles 하면 알아서 fs 모듈 사용해줌
  // path.join() 여러 인자를 넣으면 하나로 합쳐 반환한다.
  res.sendFile(path.join(__dirname, "index.html"));
});

app.post("/", (req, res) => {
  res.send("hello express");
});

/* ----------------------------- 라우트 매개변수(와일드카드) ---------------------------- */
// 위에서 아래로 내려오는 순서가 중요한 이유는 라우트 매개변수 때문
// 라우트 매개변수는 대부분 다른 라우터들보다 아래에 위치해야한다.(순차적으로 위에서 아래로 진행되기 때문에)
app.get("/category/Javascript", (req, res) => {
  res.send("hello Javascript");
});

app.get("/category/:name", (req, res) => {
  res.send("hello wildcard");
});

//// 라우트 매개변수를 안 쓰면 밑 처럼 일일이 하나하나 반복작업 해줘야됨
// app.get("/category/Javascript", (req, res) => {
//   res.send("hello Javascript");
// });

// app.get("/category/React", (req, res) => {
//   res.send("hello React");
// });

// app.get("/category/Vue", (req, res) => {
//   res.send("hello Vue");
// });

/* ---------------------- 아래와 같이 미들웨어가 적용될 주소를 정할 수도 있다 --------------------- */
// app.use("/about", (req, res, next) => {
//   console.log("어바웃에서만 실행하고 싶다.");
// 미들웨어가 적용된 후 next를 통해 /about으로 감
//   next();
// });

app.get("about", (req, res) => {
  res.send("hello express");
});

// '*'는 모든 . 모든 get요청에 대해 어떠한 주소이든지 다 처리하겠다는 뜻
//// 이것또한 라우트 매개변수와 같이 다른 라우터들보다 아래에 위치해야함
//// 범위가 넓은 라우터들은 밑에 넣어줘야한다
app.get("*", (req, res) => {
  res.send("hello everybody");
});

// 404 처리 미들웨어도 설정 가능 : 라우터들보다 밑에, 에러 미들웨어보다는 위에
// 근데 erre는 아님
app.use((req, res, next) => {
  res.send("404page 입니다");
});

/* -------------------------------------------------------------------------- */
/*                                 5) 에러 미들웨어                                 */
/* -------------------------------------------------------------------------- */
// 에러 미들웨어는 반드시 4개의 인자를 모두 써줘야한다
// 4개를 써주지 않으면 JS에서는 다른 함수로 취급함
app.use((err, req, res, next) => {
  console.error(err);
  res.send("에러가 발생했습니다. 주요 정보는 표시되지 않습니다.");
});

/* ---------------------- 포트넘버를 적지 않아도 port 라고만 해주면 됨. ---------------------- */
// 앞에서 app.set을 이용해 지정해줬기 때문임
app.listen(app.get("port"), () => {
  console.log("익스프레스 서버 실행");
});
